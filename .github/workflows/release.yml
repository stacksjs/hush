# wip

name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build and Release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Set up Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: 6.1

      - name: Install dependencies
        run: |
          brew install create-dmg

      - name: Set up keychain for code signing
        uses: mskelton/macos-certs@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
          CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}

      - name: Run tests
        run: |
          swift test

      - name: Build app
        run: |
          cd Hush
          xcodebuild clean archive \
            -project Hush.xcodeproj \
            -scheme Hush \
            -configuration Release \
            -archivePath build/Hush.xcarchive

      - name: Export app
        run: |
          cd Hush
          mkdir -p build/export

          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>developer-id</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath build/Hush.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/export

      - name: Create DMG
        id: create_dmg
        run: |
          cd Hush
          mkdir -p build/dmg

          # Check if background image exists
          if [ -f "Hush/Assets.xcassets/background.png" ]; then
            BG_OPTION="--background Hush/Assets.xcassets/background.png"
          else
            BG_OPTION=""
          fi

          # Check if icon exists
          if [ -f "Hush/Assets.xcassets/AppIcon.appiconset/AppIcon-512@2x.png" ]; then
            ICON_PATH="Hush/Assets.xcassets/AppIcon.appiconset/AppIcon-512@2x.png"
          else
            # Find an app icon in the appiconset
            ICON_PATH=$(find "Hush/Assets.xcassets/AppIcon.appiconset" -name "*.png" | sort -r | head -1)
          fi

          create-dmg \
            --volname "Hush" \
            --volicon "$ICON_PATH" \
            $BG_OPTION \
            --window-pos 200 120 \
            --window-size 800 450 \
            --icon-size 100 \
            --app-drop-link 600 165 \
            --icon "Hush.app" 200 165 \
            "build/Hush-${{ github.ref_name }}.dmg" \
            "build/export/Hush.app"

          echo "dmg_path=build/Hush-${{ github.ref_name }}.dmg" >> $GITHUB_OUTPUT

      - name: Notarize DMG
        if: startsWith(github.ref, 'refs/tags/')
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd Hush

          echo "Submitting app for notarization"
          xcrun notarytool submit \
            ${{ steps.create_dmg.outputs.dmg_path }} \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$TEAM_ID" \
            --wait

          echo "Stapling notarization ticket to DMG"
          xcrun stapler staple ${{ steps.create_dmg.outputs.dmg_path }}

      - name: Extract release notes
        id: extract_release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}

          # Extract release notes from CHANGELOG.md if available
          if [ -f "CHANGELOG.md" ]; then
            VERSION_WITHOUT_V=${VERSION/v/}
            sed -n "/## ${VERSION_WITHOUT_V}/,/## /p" CHANGELOG.md | sed '1d;$d' > release_notes.md
            if [ ! -s release_notes.md ]; then
              # If no specific version entry found, try alternative formats
              sed -n "/## \[${VERSION_WITHOUT_V}\]/,/## /p" CHANGELOG.md | sed '1d;$d' > release_notes.md
            fi
          fi

          # Create default release notes if extraction failed or file doesn't exist
          if [ ! -f "release_notes.md" ] || [ ! -s "release_notes.md" ]; then
            echo "Release ${VERSION}" > release_notes.md
          fi

          cat release_notes.md

      - name: Create GitHub Release
        uses: stacksjs/action-releaser@main
        with:
          files: |
            Hush/${{ steps.create_dmg.outputs.dmg_path }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          draft: "false"
          prerelease: "false"
          note: ${{ steps.extract_release_notes.outputs.notes || file(format('{0}/release_notes.md', github.workspace)) }}
          homebrewFormula: "homebrew-formula.rb.template"
          homebrewRepo: "stacksjs/homebrew-tap"
          homebrewPath: "Formula"
